name: PR Validation

on: 
  workflow_dispatch:  # Manual trigger only
  pull_request:
    branches: [ main ]  # Shows up in PR checks but requires manual trigger

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    name: PR Validation Checks
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Check for Python syntax errors
      run: |
        echo "Checking Python syntax..."
        find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" | xargs -I {} python -m py_compile {}
        echo "Python syntax check passed"

    - name: Run code quality checks
      run: |
        echo "Running ruff check..."
        uv run ruff check . --output-format=github
        
        echo "Running ruff format check..."
        uv run ruff format --check . --diff
        
        echo "Running mypy type checking..."
        uv run mypy modules scripts --show-error-codes --no-error-summary

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        uv run python -m pytest tests/ -v --tb=short

    - name: Test module imports
      run: |
        echo "Testing core module imports..."
        uv run python -c "
        import modules.logger
        import modules.schemas
        import modules.parsers
        import modules.validation
        import modules.pipeline
        print('All core modules imported successfully')
        "

    - name: Test script execution
      run: |
        echo "Testing script execution..."
        uv run konto-ingest --help > /dev/null
        uv run process-rates-to-silver --help > /dev/null
        uv run validate-silver --help > /dev/null
        uv run validate-silver-enhanced --help > /dev/null
        echo "All scripts execute successfully"

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" --include="*.py" --exclude-dir=".venv" --exclude-dir=".git" .; then
          echo "Found TODO/FIXME comments. Please address them before merging."
          exit 1
        fi
        echo "No TODO/FIXME comments found"

    - name: Check for debug print statements
      run: |
        echo "Checking for debug print statements..."
        if grep -r "print(" --include="*.py" --exclude-dir=".venv" --exclude-dir=".git" --exclude-dir="debug" --exclude-dir="tests" . | grep -v "logger\."; then
          echo "Found print() statements. Use logger instead."
          exit 1
        fi
        echo "No print() statements found"

    - name: Validate commit message format
      if: github.event_name == 'pull_request'
      run: |
        echo "Validating commit messages..."
        # Get commits in this PR, excluding auto-generated merge commits
        git log --oneline --no-merges origin/${{ github.base_ref }}..HEAD | while read commit; do
          # Skip auto-generated merge commits that start with "Merge"
          if echo "$commit" | grep -q "^[a-f0-9]\{7\} Merge "; then
            echo "Skipping auto-generated merge commit: $commit"
            continue
          fi
          # Extract just the commit message (remove hash and space)
          message=$(echo "$commit" | sed 's/^[a-f0-9]\{7\} //')
          if ! echo "$message" | grep -E "^(feat|fix|docs|style|refactor|test|chore|ci|build|perf|revert)(\(.+\))?: .+"; then
            echo "Invalid commit message format: $commit"
            echo "Commit messages should follow conventional commit format: type(scope): description"
            exit 1
          fi
        done
        echo "All commit messages follow conventional format"

    - name: Check file permissions
      run: |
        echo "Checking file permissions..."
        if [ -f "setup.sh" ] && [ ! -x "setup.sh" ]; then
          echo "setup.sh should be executable"
          exit 1
        fi
        echo "File permissions are correct"

    - name: Validate configuration files
      run: |
        echo "Validating configuration files..."
        # Check pyproject.toml syntax
        uv run python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"
        
        # Check settings.toml syntax
        uv run python -c "import tomllib; tomllib.load(open('settings.toml', 'rb'))"
        
        echo "Configuration files are valid"

    - name: Run data validation (if data exists)
      run: |
        echo "Running data validation..."
        mkdir -p data/bronze data/silver data/gold
        
        # Only run validation if Silver data exists
        if [ -d "data/silver" ] && [ "$(ls -A data/silver 2>/dev/null)" ]; then
          echo "Silver data found, running validation..."
          uv run validate-silver-enhanced || echo "Validation completed with issues"
        else
          echo "No Silver data found, skipping validation"
        fi

    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Module imports successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Script execution successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ No TODO/FIXME comments" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ No debug print statements" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Commit messages follow conventional format" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Configuration files valid" >> $GITHUB_STEP_SUMMARY
